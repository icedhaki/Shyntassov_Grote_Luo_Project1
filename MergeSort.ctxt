#BlueJ class context
comment0.target=MergeSort
comment0.text=\r\n\ Sorts\ an\ array\ via\ merge\ sort\r\n\r\n\ @author\ Henry\ Grote\r\n\ @version\ 09/29/2020\r\n
comment1.params=a
comment1.target=void\ sort(int[])
comment1.text=\r\n\ Sort\ an\ array\ of\ ints\ via\ merge\ sort.\r\n\r\n\ @param\ \ a\ \ an\ array\ of\ ints\r\n
comment2.params=a
comment2.target=void\ sort(java.lang.Comparable[])
comment2.text=\r\n\ Sort\ an\ array\ of\ comparable\ objects\ via\ merge\ sort.\r\n\r\n\ @param\ \ a\ \ an\ array\ of\ comparable\ objects\r\n
comment3.params=a\ c
comment3.target=void\ sort(java.lang.Comparable[],\ java.util.Comparator)
comment3.text=\r\n\ Sort\ an\ array\ of\ objects\ using\ comparator\ via\ merge\ sort.\r\n\r\n\ @param\ \ a\ \ an\ array\ of\ objects\r\n\ @param\ \ c\ \ a\ comparator\ object\r\n
comment4.params=a\ start\ end
comment4.target=void\ sort(int[],\ int,\ int)
comment4.text=\r\n\ Recursive\ call\ of\ sort\ method\ for\ an\ array\ of\ ints,\ helper\ method\ for\ sort(a)\r\n\ \r\n\ @param\ \ a\ \ array\ to\ be\ sorted\r\n\ @param\ \ start\ \ upper\ index\ of\ a\r\n\ @param\ \ end\ \ lower\ index\ of\ a\r\n
comment5.params=a\ start\ end
comment5.target=void\ sort(java.lang.Comparable[],\ int,\ int)
comment5.text=\r\n\ Recursive\ call\ of\ sort\ method\ for\ an\ array\ of\ generics,\ helper\ method\ for\ sort(a)\r\n\ \r\n\ @param\ \ a\ \ array\ to\ be\ sorted\r\n\ @param\ \ start\ \ upper\ index\ of\ a\r\n\ @param\ \ end\ \ lower\ index\ of\ a\r\n
comment6.params=a\ start\ end\ c
comment6.target=void\ sort(java.lang.Comparable[],\ int,\ int,\ java.util.Comparator)
comment6.text=\r\n\ Recursive\ call\ of\ sort\ method\ for\ an\ array\ of\ generics\ with\ a\ comparator,\ helper\ method\ for\ sort(a)\r\n\ \r\n\ @param\ \ a\ \ array\ to\ be\ sorted\r\n\ @param\ \ start\ \ upper\ index\ of\ a\r\n\ @param\ \ end\ \ lower\ index\ of\ a\r\n\ @param\ \ c\ \ comparator\ object\r\n
comment7.params=a\ start\ half\ end
comment7.target=void\ merge(int[],\ int,\ int,\ int)
comment7.text=\r\n\ combines\ two\ previously\ sorted\ halves\ of\ an\ arrays,\ helper\ method\ for\ sort(a,\ start,\ end)\r\n\ \r\n\ @param\ \ a\ \ array\ which\ halves\ are\ being\ sorted\r\n\ @param\ \ start\ \ start\ index\ of\ first\ half\ array\r\n\ @param\ \ half\ \ end\ index\ of\ first\ half\ array,\ 1\ before\ start\ index\ of\ second\ half\r\n\ @param\ \ end\ \ end\ index\ of\ second\ half\ array\r\n
comment8.params=a\ start\ half\ end
comment8.target=void\ merge(java.lang.Comparable[],\ int,\ int,\ int)
comment8.text=\r\n\ combines\ two\ previously\ sorted\ halves\ of\ an\ arrays,\ helper\ method\ for\ sort(a,\ start,\ end)\r\n\ \r\n\ @param\ \ a\ \ array\ which\ halves\ are\ being\ sorted\r\n\ @param\ \ start\ \ start\ index\ of\ first\ half\ array\r\n\ @param\ \ half\ \ end\ index\ of\ first\ half\ array,\ 1\ before\ start\ index\ of\ second\ half\r\n\ @param\ \ end\ \ end\ index\ of\ second\ half\ array\r\n
comment9.params=a\ start\ half\ end\ c
comment9.target=void\ merge(java.lang.Comparable[],\ int,\ int,\ int,\ java.util.Comparator)
comment9.text=\r\n\ combines\ two\ previously\ sorted\ halves\ of\ an\ arrays,\ helper\ method\ for\ sort(a,\ start,\ end,\ c)\r\n\ \r\n\ @param\ \ a\ \ array\ which\ halves\ are\ being\ sorted\r\n\ @param\ \ start\ \ start\ of\ first\ half\ array\r\n\ @param\ \ half\ \ end\ index\ of\ first\ half\ array,\ 1\ before\ start\ index\ of\ second\ half\r\n\ @param\ \ end\ \ end\ of\ second\ half\ array\r\n\ @param\ \ c\ \ a\ comparator\ used\ to\ compare\ the\ generics\r\n
numComments=10
